name: Publish NPM Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm install
      
      - name: Check for build script
        id: check_build
        run: |
          if grep -q '"build"' package.json; then
            echo "HAS_BUILD=true" >> $GITHUB_OUTPUT
          else
            echo "HAS_BUILD=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build
        if: steps.check_build.outputs.HAS_BUILD == 'true'
        run: npm run build
      
      - name: Test
        run: npm test
      
      - name: Setup Git User
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
      
      - name: Determine Version Bump
        id: version
        run: |
          # Get latest commit message
          COMMIT_MSG=$(git log -1 --pretty=format:%s)
          
          # Determine version bump type based on commit message
          if [[ $COMMIT_MSG == feat\(* ]] || [[ $COMMIT_MSG == feat:* ]]; then
            echo "BUMP=minor" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == fix\(* ]] || [[ $COMMIT_MSG == fix:* ]]; then
            echo "BUMP=patch" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == BREAKING* ]] || [[ $COMMIT_MSG == *\!:* ]]; then
            echo "BUMP=major" >> $GITHUB_OUTPUT
          else
            echo "BUMP=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update Version
        run: |
          npm version ${{ steps.version.outputs.BUMP }} -m "chore(release): %s [skip ci]"
      
      - name: Get new version
        id: new_version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if version exists
        id: version_exists
        run: |
          VERSION_EXISTS=$(npm view flagtrack@${{ steps.new_version.outputs.VERSION }} version 2>/dev/null || echo "")
          if [ -z "$VERSION_EXISTS" ]; then
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to NPM
        if: steps.version_exists.outputs.EXISTS == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Skip publish due to version conflict
        if: steps.version_exists.outputs.EXISTS == 'true'
        run: |
          echo "Version ${{ steps.new_version.outputs.VERSION }} already exists in the registry."
          echo "Incrementing version again to avoid conflict."
          npm version patch -m "chore(release): %s [skip ci] - auto-increment due to version conflict"
          NEW_VERSION=$(node -p "require('./package.json').version")
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Push Version Update
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push --follow-tags